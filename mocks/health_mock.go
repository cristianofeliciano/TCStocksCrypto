// Code generated by MockGen. DO NOT EDIT.
// Source: ./store/health/health.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	do "github.com/tradersclub/TCUtils/do"
	reflect "reflect"
)

// MockHealthStore is a mock of Store interface
type MockHealthStore struct {
	ctrl     *gomock.Controller
	recorder *MockHealthStoreMockRecorder
}

// MockHealthStoreMockRecorder is the mock recorder for MockHealthStore
type MockHealthStoreMockRecorder struct {
	mock *MockHealthStore
}

// NewMockHealthStore creates a new mock instance
func NewMockHealthStore(ctrl *gomock.Controller) *MockHealthStore {
	mock := &MockHealthStore{ctrl: ctrl}
	mock.recorder = &MockHealthStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHealthStore) EXPECT() *MockHealthStoreMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockHealthStore) Ping(ctx context.Context) do.ChanResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(do.ChanResult)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockHealthStoreMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHealthStore)(nil).Ping), ctx)
}

// Check mocks base method
func (m *MockHealthStore) Check(ctx context.Context) do.ChanResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx)
	ret0, _ := ret[0].(do.ChanResult)
	return ret0
}

// Check indicates an expected call of Check
func (mr *MockHealthStoreMockRecorder) Check(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockHealthStore)(nil).Check), ctx)
}
